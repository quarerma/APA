/**
 * @file fibonacci.cpp
 * @brief This file contains two implementations of the Fibonacci sequence:
 *        1. A recursive approach, which calculates Fibonacci numbers by calling itself.
 *        2. An iterative approach, which uses a loop for efficient computation.
 *        A main function is included to test either implementation, selectable by commenting/uncommenting.
 * @author Generated by Grok 3
 * @date May 31, 2025
 */

#include <iostream>

/**
 * @brief Recursive implementation of the Fibonacci sequence.
 * @param n The index of the Fibonacci number to compute.
 * @return The nth Fibonacci number.
 * @note This approach has exponential time complexity O(2^n) and is not efficient for large n.
 */
unsigned long long fibonacciRecursive(int n) {
    if (n <= 1) {
        return n;
    }
    return fibonacciRecursive(n - 1) + fibonacciRecursive(n - 2);
}

/**
 * @brief Iterative implementation of the Fibonacci sequence.
 * @param n The index of the Fibonacci number to compute.
 * @return The nth Fibonacci number.
 * @note This approach has linear time complexity O(n) and is more efficient than the recursive method.
 */
unsigned long long fibonacciIterative(int n) {
    if (n <= 1) {
        return n;
    }
    unsigned long long prev = 0, current = 1;
    for (int i = 2; i <= n; i++) {
        unsigned long long next = prev + current;
        prev = current;
        current = next;
    }
    return current;
}

/**
 * @brief Main function to test the Fibonacci implementations.
 * @details To switch between recursive and iterative, comment/uncomment the respective function call.
 *          The program computes the nth Fibonacci number, where n is hardcoded for simplicity.
 * @return 0 on successful execution.
 */
int main() {
    int n = 10; // Compute the 10th Fibonacci number
    std::cout << "Computing the " << n << "th Fibonacci number:\n";

    // Uncomment one of the following to test the desired implementation

    // Test recursive implementation
    std::cout << "Recursive result: " << fibonacciRecursive(n) << std::endl;

    // Test iterative implementation
    // std::cout << "Iterative result: " << fibonacciIterative(n) << std::endl;

    return 0;
}